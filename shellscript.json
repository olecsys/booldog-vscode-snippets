{
  "booldog:shell:skeleton": {
    "prefix": "booldog:shell:skeleton",
    "body": [
      "#!/bin/bash",
      "function read_options() {",
      "  g_opt_ind=0",
      "  while getopts \"yYnN\" opt; do",
      "    glob_opt_args[\\$g_opt_ind]=\\$opt",
      "    g_opt_ind=\\$((\\$g_opt_ind+1))",
      "  done",
      "  g_opt_ind=0",
      "}",
      "",
      "function main() {",
      "  local old_dir=\"`pwd`/`basename \"\\$0\"`\"",
      "  old_dir=`dirname \"\\$old_dir\"`",
      "  cd \"`dirname \"\\$0\"`\"",
      "  local script_dir=\"`pwd`/`basename \"\\$0\"`\"",
      "  script_dir=`dirname \"\\$script_dir\"`",
      "  cd \"\\$old_dir\"",
      "  read_options $@",
      "",
      "  local red='\\e[0;31m'",
      "  local green='\\e[0;32m'",
      "  local nocolor='\\e[0m'",
      "",
      "  __funcerror=",
      "  __funccanceled=0",
      "  __funcfailed=0",
      "",
      "  if [ \\$__funcfailed -eq 0 ] && [ \\$__funccanceled -eq 0 ]; then",
      "    ${2:echo \"Some action\"} || __funcfailed=1",
      "  fi",
      "",
      "  if [ \\$__funccanceled -eq 1 ]; then",
      "    echo -e \"\\${red}${1:Script process name} is canceled\\${nocolor}\" 1>&2",
      "  else",
      "    if [ \\$__funcfailed -eq 0 ]; then",
      "      echo -e \"\\${green}${1:Script process name} is succeeded\\${nocolor}\"",
      "    else",
      "      if ! [ -z \"\\$__funcerror\" ]; then",
      "        echo -e \"\\${red}\\$__funcerror\\${nocolor}\" 1>&2",
      "      else",
      "        echo -e \"\\${red}${1:Script process name} is failed\\${nocolor}\" 1>&2",
      "      fi",
      "    fi",
      "  fi",
      "  cd \"\\$old_dir\"",
      "}",
      "main $@",
      "if [ \\$__funcfailed -eq 0 ]; then",
      "  exit 0",
      "else",
      "  exit 1",
      "fi"
    ],
    "description": "Shell file skeleton"
  },
  "booldog:shell:wait-for-non-empty-function": {
    "prefix": "booldog:shell:wait-for-non-empty-function",
    "body": [
      "function wait_for_non_empty() {",
      "  local question=\\$1",
      "  echo -e \"\\$question\"",
      "  read __funcresult </dev/tty",
      "  while [ -z \"\\$__funcresult\" ]",
      "  do",
      "    echo -e \"\\$question\"",
      "    read __funcresult </dev/tty",
      "  done",
      "}"
    ],
    "description": "Shell function that is waiting for non empty string, variable $__funcresult contains function result"
  },
  "booldog:shell:script-confirmation-question": {
    "prefix": "booldog:shell:script-confirmation-question",
    "body": [
      "local question=\"Are you sure you want to ${1:execute script}?(Y/n)\"",
      "wait_for_yes_no \"\\$question\" \"${2:Y}\"",
      "local __funccanceled=\"\\$__funcresult\"",
      "if [ \"\\$__funccanceled\" = \"Y\" ] || [ \"\\$__funccanceled\" = \"y\" ]; then",
      "  __funccanceled=0",
      "else",
      "  __funccanceled=1",
      "fi"
    ],
    "description": "Confirmation of the script execution"
  },
  "booldog:shell:wait-for-yes-no-function": {
    "prefix": "booldog:shell:wait-for-yes-no-function",
    "body": [
      "function wait_for_yes_no() {",
      "  local question=\\$1",
      "  local default_value=\\$2",
      "  echo -e \"\\$question\"",
      "  case \\${glob_opt_args[\\$g_opt_ind]} in",
      "  \"y\" | \"Y\" | \"n\" | \"N\" )",
      "    __funcresult=\"\\${glob_opt_args[\\$g_opt_ind]}\"",
      "    echo \"\\$__funcresult\"",
      "    g_opt_ind=\\$((\\$g_opt_ind+1))",
      "    return ;;",
      "  *) ;;",
      "  esac",
      "  read __funcresult </dev/tty",
      "  while ! [ -z \"\\$__funcresult\" ] && ! [ \"\\$__funcresult\" = \"n\" ] \\",
      "    && ! [ \"\\$__funcresult\" = \"N\" ] && ! [ \"\\$__funcresult\" = \"y\" ] \\",
      "    && ! [ \"\\$__funcresult\" = \"Y\" ]",
      "  do",
      "  echo -e \"Please enter N, n, y or Y",
      "\\$question\"",
      "    read __funcresult </dev/tty",
      "  done",
      "  if [ -z \"\\$__funcresult\" ]; then",
      "    __funcresult=\\$default_value",
      "  fi",
      "}"
    ],
    "description": "Shell function that is waiting for Yes/No enter, variable $__funcresult contains function result"
  },
  "booldog:shell:path-get-absolute": {
    "prefix": "booldog:shell:path-get-absolute",
    "body": [
      "local ${1:VARNAME}_ABS=\\$(realpath \"${1:VARNAME}\")"
    ],
    "description": "Shell expresion to get real absolute path to file/directory"
  },
  "booldog:shell:escape-path-variable-for-sed": {
    "prefix": "booldog:shell:escape-path-variable-for-sed",
    "body": [
      "local ${1:VARNAME}_ESC=\\$(realpath \"\\$${1:VARNAME}\")",
      "local ${1:VARNAME}_ESC=\\$(sed 's/[\\*\\.&]/\\\\\\\\&/g' <<<\"\\$${1:VARNAME}_ESC\")",
      "local ${1:VARNAME}_ESC=\\$(sed 's/[\\/]/\\\\\\\\&/g' <<<\"\\$${1:VARNAME}_ESC\")"
    ],
    "description": "Escape file/directory path variable for `sed` processing"
  },
  "booldog:shell:if-error-or-action": {
    "prefix": "booldog:shell:if-error-or-action",
    "body": [
      "if [ \\$__funcfailed -eq 0 ] && [ \\$__funccanceled -eq 0 ]; then",
      "  ${1:echo \"Some action\"} || __funcfailed=1",
      "fi"
    ],
    "description": "Shell action expression with previous error and cancelation checking"
  },
  "booldog:shell:action-or-error": {
    "prefix": "booldog:shell:action-or-error",
    "body": [
      "${1:echo \"Some action\"} || __funcfailed=1"
    ],
    "description": "Shell action expression with setting of error if it is occured"
  },
  "booldog:shell:sed-delete-line": {
    "prefix": "booldog:shell:sed-delete-line",
    "body": [
      "sed -i \"/${1:^@reboot\\s\\+nohup\\s\\+\\\".*\\/bin\\/reboot.sh\\\"}/d\" \\",
      "  ${2:/tmp/file_to_change}"
    ],
    "description": "Shell sed command that delete line with Regex expression match"
  },
  "booldog:shell:sed-replace-middle-in-line": {
    "prefix": "booldog:shell:sed-replace-middle-in-line",
    "body": [
      "sed \"s/\\(${1:{\\\"version\\\"\\s*:\\s*\\\"}\\)${2:[^\\\"]*}\\(${3:\\\"}}\\)/\\1${4:newvalue}\\2/g\" \\",
      "  ${5:/tmp/file_to_change}"
    ],
    "description": "Shell sed command that delete line with Regex expression match"
  },
  "booldog:shell:now-date": {
    "prefix": "booldog:shell:now-date",
    "body": [
      "local NOW_DATE=$(date +\"%Y-%m-%d\")"
    ],
    "description": "Shell command to get system date"
  },
  "booldog:shell:redirect-all-to-null": {
    "prefix": "booldog:shell:redirect-all-to-null",
    "body": [
      "> /dev/null 2>&1"
    ],
    "description": "Shell expression to redirect all command output to null"
  },
  "booldog:shell:file-add-lines": {
    "prefix": "booldog:shell:file-add-lines",
    "body": [
      "(",
      "tee -a \"${1:/tmp/file_to_change}\" <<EOFBOOLDOG",
      "${2:first line\nsecond line}",
      "EOFBOOLDOG",
      ") || __funcfailed=1"
    ],
    "description": "Shell command to add line(s) to file"
  },
  "booldog:shell:file-clear-all-and-add-lines": {
    "prefix": "booldog:shell:file-clear-all-and-add-lines",
    "body": [
      "(",
      "tee \"${1:/tmp/file_to_change}\" <<EOFBOOLDOG",
      "${2:first line\nsecond line}",
      "EOFBOOLDOG",
      ") || __funcfailed=1"
    ],
    "description": "Shell command to add line(s) to file"
  },
  "booldog:shell:check-system-user-exists": {
    "prefix": "booldog:shell:check-system-user-exists",
    "body": [
      "local ${2:__user_exists}=1",
      "id -u ${1:USERNAME} || ${2:__user_exists}=0"
    ],
    "description": "Shell command to check system user existence"
  },
  "booldog:shell:check-file-exists": {
    "prefix": "booldog:shell:check-file-exists",
    "body": [
      "if [ -e \"${1:/tmp/file_to_check}\" ]; then",
      "  ${2:echo \"File exists\"}",
      "fi"
    ],
    "description": "Shell expression to check file existence"
  },
  "booldog:shell:add-system-user": {
    "prefix": "booldog:shell:add-system-user",
    "body": [
      "useradd -d \"${2:/home/USERHOMEDIR}\" -s /bin/bash -m ${1:USERNAME}"
    ],
    "description": "Shell command to add new system user with home directory"
  },
  "booldog:shell:sed-replace-line": {
    "prefix": "booldog:shell:sed-replace-line",
    "body": [
      "sed -i \\",
      "  \"s/${1:^EXEC_DIR=\\\".*\\\".*/EXEC_DIR=\\\"\\$OVERPASS_DIR_ESC\\/bin\\\" # generated by overpass_api.sh}/\" \\",
      "  ${2:/tmp/file_to_change}"
    ],
    "description": "Shell sed command that replace line with new string"
  },
  "booldog:shell:jupyter-config": {
    "prefix": "booldog:shell:jupyter-config",
    "body": [
      "#!/bin/bash",
      "function read_options() {",
      "  g_opt_ind=0",
      "  while getopts \"yYnN\" opt; do",
      "    glob_opt_args[\\$g_opt_ind]=\\$opt",
      "    g_opt_ind=\\$((\\$g_opt_ind+1))",
      "  done",
      "  g_opt_ind=0",
      "}",
      "",
      "function main() {",
      "  local old_dir=\"`pwd`/`basename \"\\$0\"`\"",
      "  old_dir=`dirname \"\\$old_dir\"`",
      "  cd \"`dirname \"\\$0\"`\"",
      "  local script_dir=\"`pwd`/`basename \"\\$0\"`\"",
      "  script_dir=`dirname \"\\$script_dir\"`",
      "  cd \"\\$old_dir\"",
      "  local red='\\e[0;31m'",
      "  local green='\\e[0;32m'",
      "  local nocolor='\\e[0m'",
      "",
      "  __funcerror=",
      "  __funccanceled=0",
      "  __funcfailed=0",
      "",
      "  if [ -z \"\\${MAKEFILE_DIR}\" ]; then",
      "    if [ -e \"\\${script_dir}/../Makefile\" ]; then",
      "      local MAKEFILE_DIR=\\${script_dir}/..",
      "    fi",
      "    if [ -e \"\\${script_dir}/Makefile\" ]; then",
      "      local MAKEFILE_DIR=\\${script_dir}",
      "    fi",
      "  fi",
      "",
      "  if [ -e \"\\${script_dir}/../config.env\" ]; then",
      "    eval \\$(cat \"\\${script_dir}/../config.env\" | sed 's/\\s/\\\\\\\\ /g' | sed 's/^/export /')",
      "  fi",
      "",
      "  if [ -z \"\\${JUPYTER_CONFIG_PATH}\" ]; then",
      "    local JUPYTER_CONFIG_PATH=\\${script_dir}/../jupyter_notebook_config.json",
      "  fi  ",
      "  if [ \\$__funcfailed -eq 0 ] && [ \\$__funccanceled -eq 0 ]; then",
      "    jupyter notebook password --config=\"\\${JUPYTER_CONFIG_PATH}\" \\",
      "      || __funcfailed=1",
      "  fi",
      "  if [ \\$__funcfailed -eq 0 ] && [ \\$__funccanceled -eq 0 ]; then",
      "    chmod 777 \"\\${JUPYTER_CONFIG_PATH}\" || __funcfailed=1",
      "  fi",
      "",
      "  if [ \\$__funccanceled -eq 1 ]; then",
      "    echo -e \"\\${red}Jupyter configuration process is canceled\\${nocolor}\" 1>&2",
      "  else",
      "    if [ \\$__funcfailed -eq 0 ]; then",
      "      echo -e \"\\${green}Jupyter configuration process is succeeded\\${nocolor}\"",
      "    else",
      "      if ! [ -z \"\\$__funcerror\" ]; then",
      "        echo -e \"\\${red}\\$__funcerror\\${nocolor}\" 1>&2",
      "      else",
      "        echo -e \"\\${red}Jupyter configuration process is failed\\${nocolor}\" 1>&2",
      "      fi",
      "    fi",
      "  fi",
      "  cd \"\\$old_dir\"",
      "}",
      "main \\$@",
      "if [ \\$__funcfailed -eq 0 ]; then",
      "  exit 0",
      "else",
      "  exit 1",
      "fi"
    ],
    "description": "Shell script that uses `config.env` and helps to tune Jupyter Notebook settings"
  },
  "booldog:shell:create-python-devenv": {
    "prefix": "booldog:shell:create-python-devenv",
    "body": [
      "#!/bin/bash",
      "function read_options() {",
      "  g_opt_ind=0",
      "  while getopts \"yYnN\" opt; do",
      "    glob_opt_args[\\$g_opt_ind]=\\$opt",
      "    g_opt_ind=\\$((\\$g_opt_ind+1))",
      "  done",
      "  g_opt_ind=0",
      "}",
      "function wait_for_yes_no() {",
      "  local question=\\$1",
      "  local default_value=\\$2",
      "  echo -e \"\\$question\"",
      "  case \\${glob_opt_args[\\$g_opt_ind]} in",
      "  \"y\" | \"Y\" | \"n\" | \"N\" )",
      "    __funcresult=\"\\${glob_opt_args[\\$g_opt_ind]}\"",
      "    echo \"\\$__funcresult\"",
      "    g_opt_ind=\\$((\\$g_opt_ind+1))",
      "    return ;;",
      "  *) ;;",
      "  esac",
      "  read __funcresult </dev/tty",
      "  while ! [ -z \"\\$__funcresult\" ] && ! [ \"\\$__funcresult\" = \"n\" ] \\\\",
      "    && ! [ \"\\$__funcresult\" = \"N\" ] && ! [ \"\\$__funcresult\" = \"y\" ] \\\\",
      "    && ! [ \"\\$__funcresult\" = \"Y\" ]",
      "  do",
      "  echo -e \"Please enter N, n, y or Y",
      "\\$question\"",
      "    read __funcresult </dev/tty",
      "  done",
      "  if [ -z \"\\$__funcresult\" ]; then",
      "    __funcresult=\\$default_value",
      "  fi",
      "}",
      "",
      "function main() {",
      "  local old_dir=\"`pwd`/`basename \"\\$0\"`\"",
      "  old_dir=`dirname \"\\$old_dir\"`",
      "  cd \"`dirname \"\\$0\"`\"",
      "  local script_dir=\"`pwd`/`basename \"\\$0\"`\"",
      "  script_dir=`dirname \"\\$script_dir\"`",
      "  cd \"\\$old_dir\"",
      "  local red='\\\\e[0;31m'",
      "  local green='\\\\e[0;32m'",
      "  local nocolor='\\\\e[0m'",
      "",
      "  __funcerror=",
      "  __funccanceled=0",
      "  __funcfailed=0",
      "",
      "  if [ -z \"\\${MAKEFILE_DIR}\" ]; then",
      "    if [ -e \"\\${script_dir}/../Makefile\" ]; then",
      "      local MAKEFILE_DIR=\\${script_dir}/..",
      "    fi",
      "    if [ -e \"\\${script_dir}/Makefile\" ]; then",
      "      local MAKEFILE_DIR=\\${script_dir}",
      "    fi",
      "  fi",
      "  if [ -e \"\\${MAKEFILE_DIR}/config.env\" ]; then",
      "    eval \\$(cat \"\\${MAKEFILE_DIR}/config.env\" | sed 's/\\\\s/\\\\\\\\ /g' | sed 's/^/export /')",
      "  fi",
      "",
      "  local question=\"Are you sure you want to prepare development environment?(Y/n)\"",
      "  wait_for_yes_no \"\\$question\" \"Y\"",
      "  local __funccanceled=\"\\$__funcresult\"",
      "  if [ \"\\$__funccanceled\" = \"Y\" ] || [ \"\\$__funccanceled\" = \"y\" ]; then",
      "    __funccanceled=0",
      "  else",
      "    __funccanceled=1",
      "  fi",
      "",
      "  if [ -z \"\\${PYTHON_ENV_NAME}\" ]; then",
      "    local PYTHON_ENV_NAME=pyenv",
      "  fi",
      "",
      "  if [ -z \"\\${PYTHON_PATH}\" ]; then",
      "    local __python3_exists=1",
      "    python3 --version > /dev/null 2>&1 || __python3_exists=0",
      "    if [ \\$__python3_exists -eq 0 ]; then",
      "      local PYTHON_PATH=python",
      "    else",
      "      local PYTHON_PATH=python3",
      "    fi",
      "  fi",
      "",
      "  local VSCODE_DIR=\\${MAKEFILE_DIR}/.vscode",
      "  if [ \\$__funcfailed -eq 0 ] && [ \\$__funccanceled -eq 0 ]; then",
      "    if ! [ -d \"\\${VSCODE_DIR}\" ]; then    ",
      "      mkdir \"\\${VSCODE_DIR}\" || __funcfailed=1",
      "    fi",
      "  fi",
      "",
      "  local GITIGNORE_PATH=\\${MAKEFILE_DIR}/.gitignore",
      "",
      "  if [ \\$__funcfailed -eq 0 ] && [ \\$__funccanceled -eq 0 ]; then",
      "    sed -i '/^'\\${PYTHON_ENV_NAME}'\\\\//d' \\\\",
      "      \"\\${GITIGNORE_PATH}\" || __funcfailed=1",
      "  fi",
      "  if [ \\$__funcfailed -eq 0 ] && [ \\$__funccanceled -eq 0 ]; then",
      "    (",
      "    tee -a \"\\${GITIGNORE_PATH}\" <<EOFBOOLDOG",
      "\\${PYTHON_ENV_NAME}/",
      "EOFBOOLDOG",
      ") || __funcfailed=1",
      "  fi",
      "",
      "  local PYTHON_ENV_DIR=\\${MAKEFILE_DIR}/\\${PYTHON_ENV_NAME}",
      "  if ! [ -d \"\\${PYTHON_ENV_DIR}\" ]; then",
      "    if [ \\$__funcfailed -eq 0 ] && [ \\$__funccanceled -eq 0 ]; then",
      "      \"\\${PYTHON_PATH}\" -m pip install --user virtualenv || __funcfailed=1",
      "    fi",
      "    if [ \\$__funcfailed -eq 0 ] && [ \\$__funccanceled -eq 0 ]; then",
      "      cd \"\\${MAKEFILE_DIR}\" || __funcfailed=1",
      "    fi",
      "    if [ \\$__funcfailed -eq 0 ] && [ \\$__funccanceled -eq 0 ]; then",
      "      \"\\${PYTHON_PATH}\" -m virtualenv --no-site-packages \\${PYTHON_ENV_NAME} || __funcfailed=1",
      "    fi    ",
      "  fi",
      "",
      "  local PYTHON_ENV_PATH=\\${MAKEFILE_DIR}/\\${PYTHON_ENV_NAME}/bin/python",
      "  local PYTHON_ENV_PATH=\\$(realpath \"\\$PYTHON_ENV_PATH\")",
      "  local PYTHON_ENV_PATH_ESC=\\$(sed 's/[\\\\*\\\\.&]/\\\\\\\\&/g' <<<\"\\$PYTHON_ENV_PATH\")",
      "  local PYTHON_ENV_PATH_ESC=\\$(sed 's/[\\\\/]/\\\\\\\\&/g' <<<\"\\$PYTHON_ENV_PATH_ESC\")",
      "",
      "  local VSCODE_SETTINGS_PATH=\\${VSCODE_DIR}/settings.json",
      "  if [ \\$__funcfailed -eq 0 ] && [ \\$__funccanceled -eq 0 ]; then",
      "    if [ -e \"\\${VSCODE_SETTINGS_PATH}\" ]; then",
      "      sed 's=\\\\(\"python\\\\.pythonPath\"\\\\s*:\\\\s*\"\\\\)[^\"]*\\\\(\".*\\\\)=\\\\1'\\${PYTHON_ENV_PATH_ESC}'\\\\2=' \\\\",
      "        \"\\${VSCODE_SETTINGS_PATH}\" || __funcfailed=1",
      "    else",
      "      (",
      "      tee \"\\${VSCODE_SETTINGS_PATH}\" <<EOFBOOLDOG",
      "{",
      "  \"python.pythonPath\": \"\\${PYTHON_ENV_PATH}\",",
      "  \"files.watcherExclude\": {",
      "    \"**/.git/objects/**\": true,",
      "    \"**/.git/subtree-cache/**\": true,",
      "    \"**/\\${PYTHON_ENV_NAME}/**\": true",
      "    }",
      "}",
      "EOFBOOLDOG",
      "    ) || __funcfailed=1",
      "    fi",
      "  fi",
      "",
      "  local PYTHON_REQUIREMENTS_PATH=\\${MAKEFILE_DIR}/requirements.txt",
      "  if [ -e \"\\${PYTHON_REQUIREMENTS_PATH}\" ]; then",
      "    if [ \\$__funcfailed -eq 0 ] && [ \\$__funccanceled -eq 0 ]; then",
      "      \"\\${PYTHON_ENV_PATH}\" -m pip install --user -U -r \"\\${PYTHON_REQUIREMENTS_PATH}\" || __funcfailed=1",
      "    fi  ",
      "  fi",
      "",
      "  if [ \\$__funccanceled -eq 1 ]; then",
      "    echo -e \"\\${red}Development environment preparation is canceled\\${nocolor}\" 1>&2",
      "  else",
      "    if [ \\$__funcfailed -eq 0 ]; then",
      "      echo -e \"\\${green}Development environment preparation is succeeded\\${nocolor}\"",
      "    else",
      "      if ! [ -z \"\\$__funcerror\" ]; then",
      "        echo -e \"\\${red}\\$__funcerror\\${nocolor}\" 1>&2",
      "      else",
      "        echo -e \"\\${red}Development environment preparation is failed\\${nocolor}\" 1>&2",
      "      fi",
      "    fi",
      "  fi",
      "  cd \"\\$old_dir\"",
      "}",
      "main \\$@",
      "if [ \\$__funcfailed -eq 0 ]; then",
      "  exit 0",
      "else",
      "  exit 1",
      "fi"
    ],
    "description": "Shell script that uses `config.env` and helps to "
  },
  "booldog:sed:vscode-snippet-json": {
    "prefix": "booldog:sed:vscode-snippet-json",
    "body": [
      "sed -e 's=\\\\\\\\=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\=g' -e 's=\"=\\\\\\\\\"=g' -e 's=[\\$]=\\\\\\\\\\\\\\\\\\$=g' -e 's=^\\\\(.*\\\\)\\$=\"\\\\1\",=g' ${1:../edXMicrosoftCV/docker/create-devenv.sh}"
    ],
    "description": "Sed command that prepare `file` for `vscode` snippet `json`"
  }
}